//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement input"",
            ""id"": ""d3db55b0-fb1c-4088-a6da-6c308878f8ee"",
            ""actions"": [
                {
                    ""name"": ""Inflate"",
                    ""type"": ""Button"",
                    ""id"": ""4cec15de-b410-4535-a164-2965973b01e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deflate"",
                    ""type"": ""Button"",
                    ""id"": ""0073ef29-a1d0-4728-aee1-b51dd32e3425"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""9118411c-69e6-4882-aa1a-6b6f93891102"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f97ffc4b-4005-4dcc-9882-f5591552ba9e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e530300-baf2-4ef8-8e2b-525af0b85d51"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25caa633-ceef-4a6a-b400-7d7b527fa3f6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Screen Buttons"",
                    ""id"": ""3d4e8de5-7ca0-40b8-9693-c04609764894"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3312cd2a-77bd-4ac7-9bdb-8dd94ab6769a"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""33f0b475-2a4d-4722-8edc-6dbad53e0297"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow keys"",
                    ""id"": ""1a04088d-08ff-4ae3-9354-2fb0a43f0451"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7474dd69-f21d-411b-b7f5-77f6567d7f72"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""dd4bed5f-1ad4-425b-a254-beb697f95eaf"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""08b97ee5-e45f-48b9-91eb-a146612b3f91"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c646d23-edc7-4bbe-9e17-26ba2977b27f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6fecc29-5257-4b73-aa68-115139e37c38"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement input
        m_Movementinput = asset.FindActionMap("Movement input", throwIfNotFound: true);
        m_Movementinput_Inflate = m_Movementinput.FindAction("Inflate", throwIfNotFound: true);
        m_Movementinput_Deflate = m_Movementinput.FindAction("Deflate", throwIfNotFound: true);
        m_Movementinput_Walk = m_Movementinput.FindAction("Walk", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement input
    private readonly InputActionMap m_Movementinput;
    private List<IMovementinputActions> m_MovementinputActionsCallbackInterfaces = new List<IMovementinputActions>();
    private readonly InputAction m_Movementinput_Inflate;
    private readonly InputAction m_Movementinput_Deflate;
    private readonly InputAction m_Movementinput_Walk;
    public struct MovementinputActions
    {
        private @PlayerControls m_Wrapper;
        public MovementinputActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inflate => m_Wrapper.m_Movementinput_Inflate;
        public InputAction @Deflate => m_Wrapper.m_Movementinput_Deflate;
        public InputAction @Walk => m_Wrapper.m_Movementinput_Walk;
        public InputActionMap Get() { return m_Wrapper.m_Movementinput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementinputActions set) { return set.Get(); }
        public void AddCallbacks(IMovementinputActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementinputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementinputActionsCallbackInterfaces.Add(instance);
            @Inflate.started += instance.OnInflate;
            @Inflate.performed += instance.OnInflate;
            @Inflate.canceled += instance.OnInflate;
            @Deflate.started += instance.OnDeflate;
            @Deflate.performed += instance.OnDeflate;
            @Deflate.canceled += instance.OnDeflate;
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
        }

        private void UnregisterCallbacks(IMovementinputActions instance)
        {
            @Inflate.started -= instance.OnInflate;
            @Inflate.performed -= instance.OnInflate;
            @Inflate.canceled -= instance.OnInflate;
            @Deflate.started -= instance.OnDeflate;
            @Deflate.performed -= instance.OnDeflate;
            @Deflate.canceled -= instance.OnDeflate;
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
        }

        public void RemoveCallbacks(IMovementinputActions instance)
        {
            if (m_Wrapper.m_MovementinputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementinputActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementinputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementinputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementinputActions @Movementinput => new MovementinputActions(this);
    public interface IMovementinputActions
    {
        void OnInflate(InputAction.CallbackContext context);
        void OnDeflate(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
    }
}
